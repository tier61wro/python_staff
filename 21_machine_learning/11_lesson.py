import numpy as np
# из набора линейных моделей библиотеки sklearn импортируем линейную регрессию
from sklearn.linear_model import LinearRegression


X = [1.48, 1.49, 1.49, 1.50, 1.51, 1.52, 1.52, 1.53, 1.53, 1.54, 1.55, 1.56, 1.57, 1.57, 1.58, 1.58, 1.59, 1.60, 1.61, 1.62, 1.63, 1.64, 1.65, 1.65, 1.66, 1.67, 1.67, 1.68, 1.68,  1.69, 1.70, 1.70, 1.71, 1.71, 1.71, 1.74, 1.75, 1.76, 1.77, 1.77, 1.78]
y = [29.1, 30.0, 30.1, 30.2, 30.4, 30.6, 30.8, 30.9, 31.0, 30.6, 30.7, 30.9, 31.0, 31.2, 31.3, 32.0, 31.4, 31.9, 32.4, 32.8, 32.8, 33.3, 33.6, 33.0, 33.9, 33.8, 35.0, 34.5, 34.7, 34.6, 34.2, 34.8, 35.5, 36.0, 36.2, 36.3, 36.6, 36.8, 36.8, 37.0, 38.5]


# X = [1, 2, 3]
#
# # преобразуем наш список X сначала в одномерный массив Numpy, а затем добавим второе измерение
# M = np.array(X).reshape(-1)
# print(M)
# X = np.array(X).reshape(-1, 1)
X = np.array(X)
print(X)
# [
#     [1] --- X[0, 0]
#     [2] --- X[1, 0]
#     [3] --- X[2, 0]
# ]


print(X)

# обучим нашу модель
# т.е. найдем те самые веса или наклон и сдвиг прямой с помощью функции потерь
model = LinearRegression()
model.fit(X, y)

print(model.coef_, model.intercept_)

X2 = [[1.6], [1.7]]
y_pred = model.predict(X2)
print(y_pred)